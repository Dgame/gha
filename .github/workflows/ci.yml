# This is a basic workflow to help you get started with Actions

name: CI

env:
  DEVELOP_BRANCH: develop
  STAGING_BRANCH: staging
  PRODUCTION_BRANCH: main

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  pull_request:
    branches: [ main ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  composer-validate:
    runs-on: 'ubuntu-latest'
    strategy:
      fail-fast: true
      matrix:
        composer-version: ['v1', 'v2']
        experimental: [false]
        include:
          - composer-version: 'latest'
            experimental: true
    continue-on-error: ${{ matrix.experimental }}
    steps:
      - uses: actions/checkout@v2
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          tools: composer:${{ matrix.composer-version }}
        env:
          COMPOSER_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Validate composer.json
        run: composer validate --strict
  php-lint:
    runs-on: 'ubuntu-latest'
    strategy:
      fail-fast: true
      matrix:
        php-version: ['8.0', '8.1']
        experimental: [false]
        include:
          - php-version: '8.2'
            experimental: true
    continue-on-error: ${{ matrix.experimental }}
    steps:
      - uses: actions/checkout@v2
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          tools: phpstan
      - run: php --version && phpstan analyse index.php --level=9
  php:
    if: ${{ always() }}
    runs-on: 'ubuntu-latest'
    needs: php-lint
    steps:
      - if: ${{ !contains(fromJson('["success", "skipped"]'), needs.php-lint.result) }}
        run: exit 1
  git-flow-validation:
    runs-on: 'ubuntu-latest'
    env:
      PR_URL: ${{ github.event.issue.pull_request.html_url }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - if: ${{ github.base_ref == env.PRODUCTION_BRANCH && github.head_ref != env.STAGING_BRANCH }}
        run: |
          gh pr comment --body "Nur ${{ env.STAGING_BRANCH }} ist gültig als Source-Branch!" "$PR_URL"
          exit 1
      - if: ${{ github.base_ref == env.STAGING_BRANCH && github.head_ref != env.DEVELOP_BRANCH }}
        run: |
          gh pr comment --body "Nur ${{ env.DEVELOP_BRANCH }} ist gültig als Source-Branch!" "$PR_URL"
          exit 1
      - if: ${{ github.base_ref == env.DEVELOP_BRANCH && !startsWith(github.head_ref, 'feature/') }}
        run: |
          gh pr comment --body "Nur feature branches sind gültig als Source-Branch!" "$PR_URL"
          exit 1
#       - name: Dump GitHub context
#         env:
#           GITHUB_CONTEXT: ${{ toJson(github) }}
#         run: |
#           echo "$GITHUB_CONTEXT"
#   automerge-info:
#     runs-on: 'ubuntu-latest'
#     needs: php
#     steps:
#     - name: Remove Label
#       run: gh pr edit --remove-label automerge "$PR_URL"
#       env:
#         PR_URL: ${{github.event.pull_request.html_url}}
#         GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
#     - name: Print comment
#       run: gh pr comment --body "Ein simpler Test" "$PR_URL"
#       env:
#         PR_URL: ${{github.event.pull_request.html_url}}
#         GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
